package <%= Configuration.package %>.<%= Configuration.controllers_package %>;

import java.util.List;

import <%= Configuration.full_models_package %>.<%= class_name %>;
import <%= Configuration.package %>.<%= Configuration.repositories_package %>.<%= repository_interface_name %>;
import br.com.caelum.vraptor.Consumes;
import br.com.caelum.vraptor.Delete;
import br.com.caelum.vraptor.Get;
import br.com.caelum.vraptor.Post;
import br.com.caelum.vraptor.Put;
import br.com.caelum.vraptor.Resource;
import br.com.caelum.vraptor.Result;
import br.com.caelum.vraptor.Validator;
import br.com.caelum.vraptor.validator.ValidationException;
import br.com.caelum.vraptor.view.Results;

@Resource
public class <%= controller_class_name %> {

  protected final Result result;
  protected final <%= repository_interface_name %> repository;
  protected final Validator validator;

  public <%= controller_class_name %>(Result result, <%= repository_interface_name %> repository, Validator validator) {
    this.result = result;
    this.repository = repository;
    this.validator = validator;
  }

  @Get("<%= path %>")
  public void index() {
    serialize(repository.findAll());
  }

  @Post("<%= path %>")
  @Consumes("application/json")
  public void create(<%= class_name %> <%= model_parameter_name %>) {
    validate(<%= model_parameter_name %>);
    repository.create(<%= model_parameter_name %>);
    result.nothing();
  }

  @Put("<%= path %>")
  @Consumes("application/json")
  public void update(<%= class_name %> <%= model_parameter_name %>) {
    validate(<%= model_parameter_name %>);
    repository.update(<%= model_parameter_name %>);
    result.nothing();
  }

  @Get("<%= "#{path}/{#{model_parameter_name}.id}" %>")
  public void show(<%= class_name %> <%= model_parameter_name %>) {
    serialize(find(<%= model_parameter_name %>));
  }

  @Delete("<%= "#{path}/{#{model_parameter_name}.id}" %>")
  public void destroy(<%= class_name %> <%= model_parameter_name %>) {
    repository.destroy(find(<%= model_parameter_name %>));
    serialize(<%= model_parameter_name %>);
  }

  private void serialize(Object object) {
    result.use(Results.json()).from(object).recursive().serialize();
  }

  private <%= class_name %> find(<%= class_name %> <%= model_parameter_name %>) {
    return repository.find(<%= model_parameter_name %>.getId());
  }

  private void validate(<%= class_name %> <%= model_parameter_name %>) {
    validator.validate(<%= model_parameter_name %>);
    if (validator.hasErrors()) {
        throw new ValidationException(validator.getErrors());
    }
  }
}

package <%= Configuration.package %>.<%= Configuration.controllers_package %>;

import java.util.List;

import <%= Configuration.full_models_package %>.<%= class_name %>;
import <%= Configuration.package %>.<%= Configuration.repositories_package %>.<%= repository_interface_name %>;
import br.com.caelum.vraptor.Delete;
import br.com.caelum.vraptor.Get;
import br.com.caelum.vraptor.Post;
import br.com.caelum.vraptor.Put;
import br.com.caelum.vraptor.Resource;
import br.com.caelum.vraptor.Result;
import br.com.caelum.vraptor.Validator;
import br.com.caelum.vraptor.view.Results;
import com.google.gson.Gson;

@Resource
public class <%= controller_class_name %> {

	private final Result result;
	private final <%= repository_interface_name %> repository;
	private final Validator validator;
  private final Gson json;
	
	<%= controller_class_name %>(Result result, <%= repository_interface_name %> repository, Validator validator) {
		this.result = result;
		this.repository = repository;
		this.validator = validator;
    this.json = new Gson();
	}
	
	@Get("<%= path %>")
	public List<<%= class_name %>> index() {
    List<User> list = repository.findAll();
    result.include("json", json.toJson(list));
    return repository.findAll();
  }

  @Get("<%= path %>.json")
  public void indexJson() {
    result.use(Results.json()).withoutRoot().from(index()).recursive().serialize();
  }
	
	@Post("<%= path %>")
	public void create(<%= class_name %> <%= model_parameter_name %>) {
		validator.validate(<%= model_parameter_name %>);
		validator.onErrorUsePageOf(this).new<%= class_name %>();
		repository.create(<%= model_parameter_name %>);
		result.redirectTo(this).index();
	}
	
	@Get("<%= "#{path}/new" %>")
	public <%= class_name %> new<%= class_name %>() {
    <%= class_name %> <%= model_parameter_name %> = new <%= class_name %>();
    result.include("json", json.toJson(<%= model_parameter_name %>));
    return <%= model_parameter_name %>;
	}
	
	@Put("<%= path %>")
	public void update(<%= class_name %> <%= model_parameter_name %>) {
		validator.validate(<%= model_parameter_name %>);
		validator.onErrorUsePageOf(this).edit(<%= model_parameter_name %>);
		repository.update(<%= model_parameter_name %>);
		result.redirectTo(this).index();
	}
	
	@Get("<%= "#{path}/{#{model_parameter_name}.id}/edit" %>")
	public <%= class_name %> edit(<%= class_name %> <%= model_parameter_name %>) {
    <%= model_parameter_name %> = repository.find(<%= model_parameter_name %>.getId());
    result.include("json", json.toJson(<%= model_parameter_name %>));
    return <%= model_parameter_name %>;
	}

	@Get("<%= "#{path}/{#{model_parameter_name}.id}.json" %>")
	public void showJson(<%= class_name %> <%= model_parameter_name %>) {
		serialize(show(user));
	}

	@Get("<%= "#{path}/{#{model_parameter_name}.id}" %>")
	public <%= class_name %> show(<%= class_name %> <%= model_parameter_name %>) {
    <%= model_parameter_name %> = repository.find(<%= model_parameter_name %>.getId());
    result.include("json", json.toJson(<%= model_parameter_name %>));
    return <%= model_parameter_name %>;
	}

	@Delete("<%= "#{path}/{#{model_parameter_name}.id}" %>")
	public void destroy(<%= class_name %> <%= model_parameter_name %>) {
		repository.destroy(repository.find(<%= model_parameter_name %>.getId()));
		result.redirectTo(this).index();  
	}

  private void serialize(Object object) {
    result.use(Results.json()).withoutRoot().from(object).recursive().serialize();
  }
}
